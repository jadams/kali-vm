{{- $arch := .arch }}
{{- $format := .format }}
{{- $imagename := .imagename }}
{{- $imagesize := .imagesize }}
{{- $keep := .keep }}
{{- $variant := .variant }}
{{- $zip := .zip }}

architecture: {{ $arch }}

actions:
  - description: "Setup the disk image"
    action: image-partition
    imagename: {{ $imagename }}.raw
    imagesize: {{ $imagesize }}
    partitiontype: msdos
    partitions:
      - name: root
        fs: ext4
        start: 2048s
        end: 100%
        flags: [ boot ]
    mountpoints:
      - mountpoint: /
        partition: root
        options: [ errors=remount-ro ]

  - action: filesystem-deploy
    setup-kernel-cmdline: false

  - description: "Create a swap file"
    action: run
    chroot: true
    script: scripts/create-swapfile.sh

  - description: "Install the kernel & bootloader"
    action: apt
    recommends: true
    packages: [ grub-pc, linux-image-generic ]

  - description: "Setup GRUB"
    action: run
    chroot: true
    command: grub-install "$IMAGE" && update-grub

  - action: overlay
    source: overlays/grub-install-devices

  - description: "Install virtualization support for {{ $variant }}"
    action: run
    chroot: true
    script: scripts/install-virt-support.sh {{ $variant }}

  {{ if eq $variant "vmware" }}
  - description: "Finish install for {{ $variant }}"
    action: run
    chroot: true
    script: scripts/finish-install-vmware.sh
  {{ end }}

  - description: "Configure apt sources.list"
    action: run
    chroot: true
    script: scripts/finish-install.sh apt-sources debconf usergroups

  - description: "Final cleanup (from within)"
    action: run
    chroot: true
    script: scripts/cleanup-in.sh

  - description: "Final cleanup (from outside)"
    action: run
    chroot: false
    script: scripts/cleanup-out.sh

  {{ if eq $zip "true" }}
  - description: "Fill unallocated blocks with zeroes"
    action: run
    chroot: false
    script: scripts/zerofree.sh $IMAGE-part1
  {{ end }}

  - description: "Export to a {{ $format }} image"
    label: "export-{{ $format }}"
    action: run
    postprocess: true
    script: scripts/export-{{ $format }}.sh {{ if eq $keep "true" }}-k{{ end }} {{ if eq $zip "true" }}-z{{ end }} {{ $imagename }}
